@use "../tokens" as *;
@use "../functions";
@use "sass:meta";
@use "sass:string";
@use "sass:list";

@mixin color-tokens($theme) {
  color-scheme: string.unquote($theme);
  $colors: functions.get($tokens, "color", $theme);
  @each $color-category, $color-values in $colors {
    @each $step, $value in $color-values {
      // Borrowing style-dictionary's syntax of "{color.surface.8}" to reference existing tokens in the map.
      // Note that I could've technically just did var(--color-surface-8) in the tokens config, but I don't want
      // to hard-code the variable name syntax there. Ideally the single source of truth for that is functions.color().
      @if meta.type-of($value) == "string" and functions.starts-with($value, "{") {
        // "{color.light.surface.8}" -> "color.light.surface.8"
        $value: functions.replace($value, "{", "");
        $value: functions.replace($value, "}", "");
        // e.g., "color.light.surface.8" -> ["color", "light", "surface", "8"]
        $path-to-referenced-token: string.split($value, ".");
        $referenced-token-category: list.nth($path-to-referenced-token, 3);
        $referenced-token-step: list.nth($path-to-referenced-token, 4);
        --color-#{$color-category}-#{$step}: #{functions.color($referenced-token-category, $referenced-token-step)};
      } @else {
        --color-#{$color-category}-#{$step}: #{$value};
      }
    }
  }
}

@mixin colors-light() {
  @include color-tokens("light");
}

@mixin colors-dark() {
  @include color-tokens("dark");
}

// Light theme
@media (prefers-color-scheme: light) {
  html {
    @include colors-light;
  }
}
// Dark theme
@media (prefers-color-scheme: dark) {
  html {
    @include colors-dark;
  }
}

[data-theme="light"] {
  @include colors-light;
}

[data-theme="dark"] {
  @include colors-dark;
}
