@import 'mixins';

div.highlighter-rouge {
  --code-block-padding-bottom: 1.6rem;
  --code-block-padding: 3.2rem;
  box-shadow: var(--code-block-box-shadow);
  padding: var(--code-block-padding);
  padding-bottom: calc(var(--code-block-padding) - var(--code-block-padding-bottom));
  background-color: var(--color-code-background);
  border-radius: 0.8rem;

  pre.highlight {
    // Spacing between the horizontal scroll bar and the code itself.
    // This only matters whenever the content overflows horizontally.
    padding-bottom: var(--code-block-padding-bottom);
  }

  code {
    padding: 0;
  }
}

.code-header {
  height: 0;
  z-index: 2;
  position: relative;

  & + .highlighter-rouge {
    margin-top: calc(-1em * var(--line-height));
  }

  // Code blocks with a file name need a bit of top padding
  &.with-file-name {
    & + .highlighter-rouge {
      padding-top: 7.6rem;
    }
  }
}

.code-file-name {
  position: absolute;
  top: 0;
  left: 0;
  display: grid;
  grid-auto-flow: column;
  grid-column-gap: 0.4rem;
  color: var(--color-black-90);
  word-break: break-all;
  padding: 2.4rem 2.4rem 0 2.4rem;
  border-radius: 0.8rem 0.8rem 0 0;
  background-color: var(--color-code-background);
  @include font-size(-1);
  @include font-weight('regular');

  &::before {
    content: 'üìÇ';
  }
}

.copy-code-button {
  --copy-code-bg-color: var(--color-black-25);
  --copy-code-text-color: var(--color-black-90);
  position: absolute;
  right: 2.4rem;
  top: 2.4rem;
  display: none;
  color: var(--copy-code-text-color);
  background-color: var(--copy-code-bg-color);
  padding: 0.6rem 1.2rem;
  border-radius: 0.4rem;
  @include font-size(-1);

  &::before {
    content: 'Copy üìã';
  }

  @include tablet {
    display: block;
  }

  &.copied,
  &:focus,
  &:hover {
    color: var(--color-black);
    background-color: var(--color-black-70);
  }

  &:not(.copied):not(:hover):focus:not(:focus-visible) {
    color: var(--copy-code-text-color);
    background-color: var(--copy-code-bg-color);
  }

  &.copied {
    &::before {
      content: 'Copied! ‚úîÔ∏è';
    }
  }
}

.highlight {
  &,
  code {
    background-color: var(--color-code-background);
    color: var(--color-code-text);
  }

  *::selection {
    background-color: var(--color-code-selection);
    // This will be overriden by more specific styles but retained for normal text and labels
    color: var(--color-code-text);
  }

  // Base Style
  pre {
    color: transparent;

    &.highlight {
      margin: 0;
      overflow: auto;
      white-space: pre;
    }
  }

  // Comments
  .c,
  .cm,
  .cp,
  .c1,
  .cs {
    font-style: italic;
    @include selection-resistant-color(var(--color-code-comment));
  }

  // Functions
  .nf,
  .nx {
    @include selection-resistant-color(var(--color-code-function));
  }

  // Attributes
  .na {
    @include selection-resistant-color(var(--color-code-attribute));
  }

  // Variables
  .bp,
  .nv,
  .vc,
  .vg,
  .vi,
  .err {
    @include selection-resistant-color(var(--color-code-variable));
  }

  // Numbers
  .m,
  .mf,
  .mh,
  .mi,
  .mo,
  .il {
    @include selection-resistant-color(var(--color-code-number));
  }

  // Keywords
  .k,
  .kd,
  .kn,
  .kr,
  .kt {
    @include selection-resistant-color(var(--color-code-keyword));
  }

  // Constants
  .kc {
    @include selection-resistant-color(var(--color-code-constant));
  }

  // Pseudo
  .kp,
  .nb {
    @include selection-resistant-color(var(--color-code-support));
  }

  // Strings
  .s,
  .sb,
  .sc,
  .s1,
  .s2 {
    @include selection-resistant-color(var(--color-code-string));
  }

  // Classes/tags
  .nc,
  .nt,
  .nl {
    @include selection-resistant-color(var(--color-code-tag));
  }

  // Punctuation
  .p {
    @include selection-resistant-color(var(--color-code-punctuation));
  }

  .o {
    @include selection-resistant-color(var(--color-code-operator));
  }

  // Operators
  .ow {
    @include selection-resistant-color(var(--color-code-operator-word));
  }
}
