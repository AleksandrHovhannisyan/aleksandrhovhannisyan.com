@import 'colors';
@import 'fonts';

div.highlighter-rouge {
  $code-block-padding-bottom: 1.6rem;
  $code-block-padding: 3.2rem;
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem 0 rgba(0, 0, 0, 0.4);

  & > div.highlight {
    padding: $code-block-padding;
    padding-bottom: $code-block-padding - $code-block-padding-bottom;

    pre.highlight {
      // Spacing between the horizontal scroll bar and the code itself.
      // This only matters whenever the content overflows horizontally.
      padding-bottom: $code-block-padding-bottom;
    }
  }

  code {
    padding: 0;
  }
}

.code-header {
  display: flex;
  background-color: $black-600;
  border-top-left-radius: 0.4rem;
  border-top-right-radius: 0.4rem;
  box-shadow: 0 0.4rem 0.4rem 0px rgba(0, 0, 0, 0.3);
  flex-wrap: wrap;
  justify-content: flex-end;
  padding: 1.6rem;
  margin-bottom: -1 * $line-height + unquote('em');
  z-index: 2;

  // Code blocks that have a header
  & + .highlighter-rouge {
    margin-top: 0 !important;

    // If we don't do this, the top-left and top-right border radii will be visible
    & .highlight {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }
}

.code-file-name-container {
  display: flex;
  align-items: center;
  flex: 2;
  justify-content: flex-start;
}

.code-file-name {
  color: $black-200;
  margin: 0;
  word-break: break-all;
  @include fontSize(0);
  @include fontWeight('regular');

  &::before {
    content: 'üìÇ';
    margin-right: 0.4rem;
  }
}

.copy-code-container {
  display: flex;
  flex: 1;
  justify-content: flex-end;
}

.copy-code-button {
  border: none;
  align-items: center;
  cursor: pointer;
  display: grid;
  grid-auto-flow: column;
  grid-column-gap: 0.4rem;
  background-color: $black-500;
  color: $black-200;
  padding: 0.8rem;
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.4rem 0 rgba(0, 0, 0, 0.5);
  top: 0;
  position: relative;
  @include fontSize(0);

  &::before {
    content: 'Copy';
  }

  &::after {
    content: 'üìã';
    display: block;
  }

  &.copied,
  &:focus,
  &:hover {
    color: $black;
    background-color: $black-400;
  }

  &:active {
    box-shadow: 0 0 0.4rem 0 rgba(0, 0, 0, 0.5);
    top: 0.2rem;
  }

  &.copied {
    &::before {
      content: 'Copied!';
    }

    &::after {
      content: '‚úîÔ∏è';
    }
  }
}

code {
  background-color: var(--inline-code-bg-color);
  border-radius: 0.4rem;
  color: var(--inline-code-text-color);
  padding: 0.2em 0.4em;
  @include fontFamily('code');
  // TODO: set type scale for code family later
  font-size: 0.925em;
}

// VS Code Dark Theme, modified for use with Rouge.
.highlight {
  border-radius: 0.4rem;

  &,
  code {
    background-color: $code-background;
    color: $code-text;
  }

  *::selection {
    background-color: $code-selection;
    // This will be overriden by more specific styles but retained for normal text and labels
    color: $code-text;
  }

  // Base Style
  pre {
    background-color: $code-background;
    color: transparent;

    &.highlight {
      margin: 0px;
      overflow: auto;
      white-space: pre;
    }
  }

  // Comments
  .c,
  .cm,
  .cp,
  .c1,
  .cs {
    font-style: italic;
    @include selectionResistantColor($code-comment);
  }

  // Functions
  .nf,
  .nx {
    @include selectionResistantColor($code-function);
  }

  // Attributes
  .na {
    @include selectionResistantColor($code-attribute);
  }

  // Variables
  .bp,
  .nv,
  .vc,
  .vg,
  .vi,
  .err {
    @include selectionResistantColor($code-variable);
  }

  // Numbers
  .m,
  .mf,
  .mh,
  .mi,
  .mo,
  .il {
    @include selectionResistantColor($code-number);
  }

  // Keywords
  .k,
  .kd,
  .kn,
  .kr,
  .kt {
    @include selectionResistantColor($code-keyword);
  }

  // Constants
  .kc {
    @include selectionResistantColor($code-constant);
  }

  // Pseudo
  .kp,
  .nb {
    @include selectionResistantColor($code-support);
  }

  // Strings
  .s,
  .sb,
  .sc,
  .s1,
  .s2 {
    @include selectionResistantColor($code-string);
  }

  // Classes/tags
  .nc,
  .nt,
  .nl {
    @include selectionResistantColor($code-tag);
  }

  // Punctuation
  .p {
    @include selectionResistantColor($code-punctuation);
  }

  .o {
    @include selectionResistantColor($code-operator);
  }

  // Operators
  .ow {
    @include selectionResistantColor($code-operator-word);
  }
}
