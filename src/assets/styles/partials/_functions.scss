@use "sass:list";
@use "sass:math";
@use "sass:string";
@use "sass:map";

@import "./config";
@import "./breakpoints";

@function to-rems($value) {
  // Check if the value, as a string, is already expressed in rems
  @if ends-with("" + $value, "rem") {
    @return $value;
  }

  $value-rems: math.div($value, 16px) * 1rem;
  @return $value-rems;
}

/// Deep version of map.get
@function get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

/// Returns the first element of the given array.
@function first($list) {
  @return list.nth($list, 1);
}

@function last($list) {
  @return list.nth($list, list.length($list));
}

/// Returns the string prefix that is used for the custom properties corresponding to the specified key in the design config.
@function get-custom-property-prefix($key) {
  $custom-property-prefix: get($config, $key, "customPropertyPrefix");
  @if not $custom-property-prefix {
    @error "#{$key} is missing a custom property prefix in the config";
  }
  @return $custom-property-prefix;
}

/// Returns the spacing value corresponding to the given step as an offset from the base. Throws an error if the provided step is unrecognized.
@function spacing($step) {
  $spacing-steps: get($config, "spacing", "steps");
  $spacing-base-index: list.index($spacing-steps, get($config, "spacing", "base"));
  $min-step: 0 - $spacing-base-index + 1;
  $max-step: list.length($spacing-steps) - $spacing-base-index;
  @if $step < $min-step or $step > $max-step {
    @error "#{$step} is not a valid step in the spacing scale. Valid steps range from #{$min-step} to #{$max-step}, inclusive.";
  } @else {
    @return var(--#{get-custom-property-prefix("spacing")}-#{$step});
  }
}

/// Returns the font size value corresponding to the given step as an offset from the base. Throws an error if the provided step is unrecognized.
@function font-size($step) {
  $font-size-steps: get($config, "typeScale", "steps");
  $step-index: list.index($font-size-steps, $step);
  @if $step-index < 1 or $step-index > list.length($font-size-steps) {
    $min-step-name: first($font-size-steps);
    $max-step-name: last($font-size-steps);
    @error "#{$step} is not a valid step in the type scale. Valid steps range from #{$min-step-name} to #{$max-step-name}, inclusive.";
  } @else {
    @return var(--#{get-custom-property-prefix("typeScale")}-#{$step});
  }
}

/// Returns true if the given string ends with the given suffix.
/// Adapted for use from: https://stackoverflow.com/a/40389473/5323344

@function ends-with($string, $suffix) {
  $string-length: string.length($string);
  $suffix-length: string.length($suffix);
  @return str-slice($string, ($string-length - $suffix-length + 1)) == $suffix;
}

@function rnd($number, $places: 0) {
  $n: 1;
  @if $places > 0 {
    @for $i from 1 through $places {
      $n: $n * 10;
    }
  }
  @return math.div(math.round($number * $n), $n);
}

$default-min-bp: map.get($media-breakpoints, "mobile");
$default-max-bp: map.get($media-breakpoints, "desktop");

/// Returns a CSS clamp(...) declaration, with the responsive argument computed automatically.
@function clamped($min-px, $max-px, $min-bp: $default-min-bp, $max-bp: $default-max-bp) {
  $slope: math.div($max-px - $min-px, $max-bp - $min-bp);
  $slope-vw: rnd($slope * 100, 2);
  $intercept-rems: rnd(to-rems($min-px - $slope * $min-bp), 2);
  $min-rems: rnd(to-rems($min-px), 2);
  $max-rems: rnd(to-rems($max-px), 2);
  @return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
}
