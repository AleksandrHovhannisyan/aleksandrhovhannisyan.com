@use "sass:math";
@use "sass:string";
@use "sass:map";
@use "sass:list";

@import "./functions";
@import "./breakpoints";

@mixin centered {
  /* stylelint-disable-next-line scss/no-global-function-names */
  --padding: min(4vw, #{spacing(-1)});

  // why not just use content-box? because it creates overflow issues on mobile with width: 100% below
  max-width: calc(var(--page-max-width) + 2 * var(--padding));
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--padding);
  padding-right: var(--padding);
}

@mixin full-bleed {
  --offset: calc(-1 * var(--padding));
  border-radius: 0;
  margin-inline: var(--offset);
  @include tablet {
    margin-inline: 0;
  }
}

// Inspiration: https://stackoverflow.com/a/49437769/5323344

@mixin transition($props...) {
  $result: ();
  @for $i from 1 through length($props) {
    $prop: list.nth($props, $i);
    $result: list.append($result, $prop);
    @if $i != length($props) {
      $result: list.append(
        $result,
        string.unquote(
          $string: ",",
        )
      );
    }
  }
  transition-timing-function: var(--transition-timing-function);
  transition-duration: var(--transition-duration);
  transition-property: $result;
}

@mixin headings {
  :is(h1,h2,h3,h4,h5,h6) {
    @content;
  }
}

@mixin z-index($key) {
  z-index: z-index($key);
}

@mixin font-size($size) {
  // expose CSS var to later compute other things, e.g., spacing
  --line-height: calc(2ex + #{to-rems(11px)});
  font-size: var(--fs-#{$size});
  line-height: var(--line-height);
}

@mixin font-family($family) {
  font-family: var(--ff-#{$family});
}

@mixin font-weight($family, $weight) {
  font-weight: var(--fw-#{$family}-#{$weight});
}

@mixin heading {
  @include font-family("title");
  @include font-weight("title", "bold");
}

@mixin underlined-link($initially-underlined: true) {
  @if $initially-underlined {
    text-decoration: underline;

    &:is(:hover, :focus-visible) {
      text-decoration: none;
    }
  } @else {
    text-decoration: none;

    &:is(:hover, :focus-visible) {
      text-decoration: underline;
    }
  }
}

@mixin rhythm() {
  > * + * {
    margin-top: var(--line-height);
  }
}

@mixin line-clamp($num-lines) {
  overflow: hidden;
  text-overflow: ellipsis;
  /* stylelint-disable-next-line value-no-vendor-prefix */
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $num-lines;
}

// Breakpoint mixins

@mixin mobile {
  $bp: map.get($media-breakpoints, mobile);
  @media screen and (min-width: $bp) {
    @content;
  }
}

@mixin mobile-lg {
  $bp: map.get($media-breakpoints, mobile-lg);
  @media screen and (min-width: $bp) {
    @content;
  }
}

@mixin tablet-sm {
  $bp: map.get($media-breakpoints, tablet-sm);
  @media screen and (min-width: $bp) {
    @content;
  }
}

@mixin tablet {
  $bp: map.get($media-breakpoints, tablet);
  @media screen and (min-width: $bp) {
    @content;
  }
}

@mixin desktop {
  $bp: map.get($media-breakpoints, desktop);
  @media screen and (min-width: $bp) {
    @content;
  }
}

@mixin desktop-lg {
  $bp: map.get($media-breakpoints, desktop-lg);
  @media screen and (min-width: $bp) {
    @content;
  }
}
